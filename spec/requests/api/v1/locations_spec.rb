# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/locations", type: :request do
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::LocationsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { "Content-Type" => "application/vnd.api+json" }
  end

  let(:valid_jsonapi_create_params) do
    {
      "data": {
        "type": "locations",
        "attributes": {
          "ip": "207.244.71.78"
        }
      }
    }
  end

  let(:invalid_jsonapi_create_params) do
    {
      "data": {
        "type": "locations",
        "attributes": {
          "ip": ""
        }
      }
    }
  end

  let(:valid_jsonapi_update_params) do
    {
      "data": {
        "type": "locations",
        "attributes": {
          "ip": "94.75.206.226"
        }
      }
    }
  end

  describe "GET /index" do
    it "renders a successful response", vcr: "ipinfo-io-207-244-71-78" do
      FactoryBot.create(:location)
      get api_v1_locations_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response", vcr: "ipinfo-io-207-244-71-78" do
      location = FactoryBot.create(:location)
      get api_v1_location_url(location), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Location", vcr: "ipinfo-io-207-244-71-78" do
        expect do
          post api_v1_locations_url,
               params: valid_jsonapi_create_params, headers: valid_headers, as: :json
        end.to change(Location, :count).by(1)
      end

      it "renders a JSON response with the new api_v1_location", vcr: "ipinfo-io-207-244-71-78" do
        post api_v1_locations_url,
             params: valid_jsonapi_create_params, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Location", vcr: "suka" do
        expect do
          post api_v1_locations_url,
               params: invalid_jsonapi_create_params, headers: valid_headers, as: :json
        end.to change(Location, :count).by(0)
      end

      it "renders a JSON response with errors for the new api_v1_location" do
        post api_v1_locations_url,
             params: invalid_jsonapi_create_params, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        skip("Add a hash of attributes valid for your model")
      end

      it "updates the requested api_v1_location", vcr: "ipinfo-io-207-244-71-78-94-75-206-226" do
        location = FactoryBot.create(:location)
        patch api_v1_location_url(location),
              params: valid_jsonapi_update_params, headers: valid_headers, as: :json
        location.reload
        expect(location.ip).to eq("94.75.206.226")
      end

      it "renders a JSON response with the api_v1_location", vcr: "ipinfo-io-207-244-71-78-94-75-206-226" do
        location = FactoryBot.create(:location)
        patch api_v1_location_url(location),
              params: valid_jsonapi_update_params, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the api_v1_location", vcr: "ipinfo-io-207-244-71-78" do
        location = FactoryBot.create(:location)
        patch api_v1_location_url(location),
              params: invalid_jsonapi_create_params, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested api_v1_location", vcr: "ipinfo-io-207-244-71-78" do
      location = FactoryBot.create(:location)
      expect do
        delete api_v1_location_url(location), headers: valid_headers, as: :json
      end.to change(Location, :count).by(-1)
    end
  end
end
